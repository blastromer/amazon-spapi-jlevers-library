<?php

namespace Typhoeus\JleversSpapi\Commands;

use Illuminate\Console\Command;
use Carbon\Carbon;
use Storage;
use Typhoeus\JleversSpapi\Services\Catalog;
use Typhoeus\JleversSpapi\Services\Feed;
use Typhoeus\JleversSpapi\Services\Report;
use Typhoeus\JleversSpapi\Traits\ConsoleOutput;
use Typhoeus\JleversSpapi\Traits\TimeStamp;

class AmazonDownloadListingsCommand extends Command
{
    use ConsoleOutput, TimeStamp;

    protected $signature    =   'amz-spapi:download:listings
                                {--category=}
                                {--notifiction}
                                {--show}
                                ';
    protected $description  = 'This command will donwload listings from sellers catalog, these includes all the attributes related to product: See the example all, active, inactive';

    protected $report;
    protected $feed;

    public $categories = ['all', 'active', 'inactive'];

    public function __construct(Report $report, Feed $feed) {
        parent::__construct();
        $this->report   = $report;
        $this->feed     = $feed;
    }

    public function handle()
    {
        $category           = $this->option('category');
        $appName            = $this->report->app->getAppName();
        $defaultFileName    = "_amazon_list.csv";
        if (!in_array($category, $this->categories)) {
            $this->error("The option category is not accepting the value you provided, [{$category}] category is not valid.");
        }
        $dir                = $category . "/" . $appName;
        $defaultFileName    = $category . $defaultFileName;
        $this->info("Downloading {$category} listings...");
        if (!Storage::exists($dir)) {
            $this->info("The directory [{$dir}] is not existing. Creating new directory for listing...");
            if (!Storage::makeDirectory($dir)) {
                throw new Exception("Couldn't create new directory for [{$dir}]...");
            }
        }
        $fileName           = Carbon::now()->format('Y-m-d_H-i-s') . '.txt';
        $fileDir            = $dir . "/{$fileName}";
        $defaultFileName    = $dir . "/" . $defaultFileName;
        if ($this->report->setSellerConfig(true)) {
            if ($category == "all") {
                $downloadList = $this->report->listAllItemsReport();
            } else if ($category == "all") {
                $downloadList = $this->report->listActiveItemsReport();
            } else {
                $downloadList = $this->report->listInactiveItemsReport();
            }
            $reportId       = $downloadList->getReportId() ?? null;
            if (!$reportId) {
                throw new Exception("Couldn't generate [{$category}] listing...");
            }
            $this->info("Report generated by this ID: [{$reportId}]");

            $report         = $this->report->getById($reportId, $defaultFileName, $fileDir);
        }

        if (!$report) {
            throw new Exception("Failed to create report for this [{$dir}]...");
        }
        $this->info("Successfully donwloaded the report...");
    }
}
